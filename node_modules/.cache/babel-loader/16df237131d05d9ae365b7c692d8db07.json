{"ast":null,"code":"var _jsxFileName = \"/home/premsagar/Documents/blockchains/hey/src/components/dropdown.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/dropdown.css\";\n\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChanged = e => {\n      const value = e.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        console.log(this.state.listItems);\n\n        if (value !== null || value.match(/^ *$/) === null) {\n          const regex = new RegExp(`${value}`, \"i\");\n          suggestions = this.state.listItems.sort().filter(v => regex.test(v));\n        }\n      }\n\n      this.setState(() => ({\n        suggestions,\n        text: value,\n        colorSelected: false,\n        searchQuery: value\n      }));\n\n      if (!this.state.colorSelected) {\n        this.colorRef.current.style.display = \"none\";\n      }\n    };\n\n    this.handleEnter = e => {\n      console.log(e);\n      console.log(e.currentTarget);\n      const value = e.target.value;\n\n      if (e.keyCode === 13) {\n        this.setState(() => ({\n          text: value,\n          suggestions: [],\n          colorSelected: true\n        }));\n      }\n    };\n\n    this.state = {\n      listItems: [],\n      suggestions: [],\n      text: \"\",\n      colorSelected: false,\n      searchQuery: \"\"\n    };\n    this.colorRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      listItems: this.props.colorsList\n    });\n  }\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: [],\n      colorSelected: true\n    }));\n    console.log(this.colorRef);\n    this.colorRef.current.style.display = \"inline-block\";\n    this.colorRef.current.style.backgroundColor = value;\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions,\n      searchQuery\n    } = this.state;\n    console.log(suggestions + \"bolded == >>\" + searchQuery);\n\n    this.boldedString = item => {\n      const value = searchQuery;\n      const regex = new RegExp(`${value}`, \"i\");\n      const match = item.match(regex);\n\n      if (match != null && (value !== null || value.match(/^ *$/) === null)) {\n        const parts = item.split(match[0], 2);\n        return /*#__PURE__*/React.createElement(\"li\", {\n          onKeyDown: this.handleEnter,\n          tabIndex: \"0\",\n          onClick: () => this.suggestionSelected(item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }\n        }, parts[0], /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, match[0]), parts[1]);\n      }\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        onKeyDown: this.handleEnter,\n        tabIndex: \"0\",\n        onClick: () => this.suggestionSelected(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, item);\n    };\n\n    if (this.state.colorSelected && suggestions.length === 0) {\n      return null;\n    } else if (suggestions.length === 0) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"Dropdown-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, suggestions.map(item => this.boldedString(item)));\n    }\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, \"Dropdown List for Colors\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show-color-in-circle\",\n      ref: this.colorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      tabIndex: \"0\",\n      placeholder: \"Search your color here...\",\n      value: text,\n      onChange: this.onTextChanged,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nDropdown.propTypes = {\n  /**\n   * The items to display in the dropdown menu\n   */\n  colorsList: PropTypes.array.isRequired\n};\nexport default Dropdown;","map":{"version":3,"sources":["/home/premsagar/Documents/blockchains/hey/src/components/dropdown.js"],"names":["React","Component","PropTypes","Dropdown","constructor","props","onTextChanged","e","value","target","suggestions","length","console","log","state","listItems","match","regex","RegExp","sort","filter","v","test","setState","text","colorSelected","searchQuery","colorRef","current","style","display","handleEnter","currentTarget","keyCode","createRef","componentDidMount","colorsList","suggestionSelected","backgroundColor","renderSuggestions","boldedString","item","parts","split","map","render","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/dropdown.css\";\n\nclass Dropdown extends Component {\n  static propTypes = {\n    /**\n     * The items to display in the dropdown menu\n     */\n    colorsList: PropTypes.array.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      listItems: [],\n      suggestions: [],\n      text: \"\",\n      colorSelected: false,\n      searchQuery: \"\",\n    };\n\n    this.colorRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      listItems: this.props.colorsList,\n    });\n  }\n\n  onTextChanged = (e) => {\n    const value = e.target.value;\n    let suggestions = [];\n    if (value.length > 0) {\n      console.log(this.state.listItems);\n      if (value !== null || value.match(/^ *$/) === null) {\n        const regex = new RegExp(`${value}`, \"i\");\n        suggestions = this.state.listItems.sort().filter((v) => regex.test(v));\n      }\n    }\n    this.setState(() => ({\n      suggestions,\n      text: value,\n      colorSelected: false,\n      searchQuery: value,\n    }));\n    if (!this.state.colorSelected) {\n      this.colorRef.current.style.display = \"none\";\n    }\n  };\n\n  handleEnter = (e) => {\n    console.log(e);\n    console.log(e.currentTarget);\n    const value = e.target.value;\n    if (e.keyCode === 13) {\n      this.setState(() => ({\n        text: value,\n        suggestions: [],\n        colorSelected: true,\n      }));\n    }\n  };\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: [],\n      colorSelected: true,\n    }));\n\n    console.log(this.colorRef);\n    this.colorRef.current.style.display = \"inline-block\";\n    this.colorRef.current.style.backgroundColor = value;\n  }\n\n  renderSuggestions() {\n    const { suggestions, searchQuery } = this.state;\n    console.log(suggestions + \"bolded == >>\" + searchQuery);\n    this.boldedString = (item) => {\n      const value = searchQuery;\n      const regex = new RegExp(`${value}`, \"i\");\n      const match = item.match(regex);\n      if (match != null && (value !== null || value.match(/^ *$/) === null)) {\n        const parts = item.split(match[0], 2);\n        return (\n          <li\n            onKeyDown={this.handleEnter}\n            tabIndex=\"0\"\n            onClick={() => this.suggestionSelected(item)}\n          >\n            {parts[0]}\n            <strong>{match[0]}</strong>\n            {parts[1]}\n          </li>\n        );\n      }\n      return (\n        <li\n          onKeyDown={this.handleEnter}\n          tabIndex=\"0\"\n          onClick={() => this.suggestionSelected(item)}\n        >\n          {item}\n        </li>\n      );\n    };\n\n    if (this.state.colorSelected && suggestions.length === 0) {\n      return null;\n    } else if (suggestions.length === 0) {\n      return null;\n    } else {\n      return (\n        <ul className=\"Dropdown-content\">\n          {suggestions.map((item) => this.boldedString(item))}\n        </ul>\n      );\n    }\n  }\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div className=\"Dropdown\">\n        <h2>Dropdown List for Colors</h2>\n        <div className=\"show-color-in-circle\" ref={this.colorRef} />\n        <input\n          tabIndex=\"0\"\n          placeholder=\"Search your color here...\"\n          value={text}\n          onChange={this.onTextChanged}\n          type=\"text\"\n        />\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n}\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}